name: Container

on:
  push:
    branches: [ master ]
  release:
    types: [ published ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        variant: [ ui, tui ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ matrix.variant }}-latest,enable=${{ eq(github.ref, 'refs/heads/master') }}
            type=ref,event=tag,prefix=${{ matrix.variant }}-
            type=sha,format=short,prefix=${{ matrix.variant }}-
          labels: |
            org.opencontainers.image.title=plastic
            org.opencontainers.image.description=NES emulator container with GUI and TUI variants
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          build-args: |
            DEFAULT_VARIANT=${{ matrix.variant }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  verify-tui:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set variables
        id: vars
        run: echo "short_sha=${GITHUB_SHA::7}" >> "$GITHUB_OUTPUT"

      - name: Log in to registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull TUI image
        run: docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:tui-${{ steps.vars.outputs.short_sha }}

      - name: Run plastic_tui smoke test
        id: run_tui
        run: |
          set -euo pipefail
          LOG_DIR=container-test-logs
          mkdir -p "$LOG_DIR"
          ROM_PATH="$PWD/test_roms/.startup.nes"
          IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:tui-${{ steps.vars.outputs.short_sha }}"
          echo "Testing image: $IMAGE" | tee "$LOG_DIR/info.txt"
          echo "Using ROM: $ROM_PATH" | tee -a "$LOG_DIR/info.txt"

          status=0
          set +e
          timeout 15s docker run --rm -it \
            -e TERM=xterm-256color \
            -v "$ROM_PATH:/startup.nes:ro" \
            "$IMAGE" /startup.nes -a \
            >"$LOG_DIR/stdout.log" 2>"$LOG_DIR/stderr.log"
          status=$?
          set -e

          echo "exit_status=$status" | tee "$LOG_DIR/result.txt"

          if [ "$status" -ne 0 ] && [ "$status" -ne 124 ]; then
            echo "Container run failed (exit $status)" >&2
            exit "$status"
          fi

          if [ "$status" -eq 124 ]; then
            echo "timeout=true" >> "$GITHUB_OUTPUT"
            echo "Container execution timed out after 15s" >> "$LOG_DIR/result.txt"
          fi
      - name: Upload container logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: plastic-tui-container-logs
          path: container-test-logs
